<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel\Services\Index;

use Pho\Kernel\Kernel;
use Pho\Kernel\Services\Index;
use Pho\Kernel\TestCase;

class MySQLTest extends TestCase
{
    /**
     * Pho-kernel
     * @var \Pimple
     */
    protected $kernel;

    /**
     * Elasticsearch php sdk client connect
     * @var \Elasticsearch\Client
     */
    protected $client;

    protected function getKernelConfig()
    {
        return array(
            "services" => array(
                "database" => getenv('DATABASE_URI'),
                "storage"  => getenv("STORAGE_URI"),
                "index"    => getenv("INDEX_URI"),
            ),
        );
    }

    public function setUp()
    {

        if (!function_exists('mysqli_connect')) {
            $this->markTestSkipped('MySQLi excention not setted up');
            return;
        }
        $params = parse_url($this->getKernelConfig()['services']['index']);
        $this->connectToDB($params);
        if (!$this->client) {
            $this->markTestSkipped('Could not connect to MySQL database');
            return;
        }

        if (mysqli_connect_errno()) {
            $this->markTestSkipped('Could not connect to MySQL database. Reason:' . mysqli_connect_error());
            return;
        }

        parent::setUp();

        return;
    }

    public function tearDown()
    {

    }

    public function testCreatedTables()
    {
        $result = $this->client->query("SHOW TABLES LIKE 'index'");

        $this->assertSame($result->num_rows, 1);
    }

    public function testAppendIndex()
    {
        $node = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->graph(), "123456");

        $node->attributes()->Key = 'Value';
        $this->kernel->index()->index($node);

        $result = $this->client->query(sprintf('SELECT `uuid` FROM `index` WHERE `key` = "Key" AND `value` = "Value"'));
        $this->assertSame($result->num_rows, 1);
    }

    public function testSearchIndex()
    {
        $node = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->graph(), "123456");

        $node->attributes()->Key = 'Value';

        
        $index = $this->kernel->index();
        
        //$index->index($node);

        $search = $index->search('Value');
        $this->assertSame([$node->id()->toString()], $search);

        $search = $index->search('Value', 'Key');
        $this->assertSame([$node->id()->toString()], $search);

        $search = $index->search('Value', 'Key', ['User']);
        $this->assertSame([$node->id()->toString()], $search);
    }

    private function connectToDB($params)
    {
        $query = [];
        parse_str($params['query'], $query);

        $params['host']     = !empty($params['host']) ? $params['host'] : ini_get("mysqli.default_host");
        $params['user']     = !empty($params['user']) ? $params['user'] : ini_get("mysqli.default_user");
        $params['pass']     = !empty($params['pass']) ? $params['pass'] : ini_get("mysqli.default_pw");
        $params['port']     = !empty($params['port']) ? $params['port'] : ini_get("mysqli.default_port");
        $params['database'] = !empty($query['database']) ? $query['database'] : '';
        $params['table']    = !empty($query['table']) ? $query['table'] : 'index';

        $this->client = new \mysqli($params['host'], $params['user'], $params['pass'], $params['database'], (int) $params['port']);

        if ($this->client) {
            $this->client->query(sprintf('TRUNCATE TABLE `%s`', $params['table']));
        }
    }
}
